<?php
// $Id$

/**
 * @file
 * This module adds functionality to import
 * translations files as CSV files.
 */

/**
 * Field separator by default in CSV files.
 */
define("CSV_FIELD_SEPARATOR_BABEL", ";");

/**
 * Default encoding for CSV files.
 *
 * This is needed in order to read properly generated file with MS Excel.
 */
define("CSV_ENCODING_BABEL", "UTF-8");

/**
 * Implementation of hook_permission().
 */
function DRUPAU_i18n_labels_import_permission() {
  return array(

	 'import label translation' => array(
      'title' => t('Import Label Translation'),
      'description' => t('Import a translation in CSV format.'),
    ),
	 'modify label settings' => array(
      'title' => t('DRUPAU label import settings'),
      'description' => t('Configure the DRUPAU label import module.'),
    )

  );
}

/**
 * Implementation of hook_menu().
 */
function DRUPAU_i18n_labels_import_menu() {

  $items = array();

  $items['admin/build/DRUPAU_i18n_labels_import'] = array(
    'title' => t('DRUPAU Labels import'),
    'description' => t('Import translation through CSV file'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('DRUPAU_i18n_labels_import_import_form'),
    'access arguments' => array('export translation'),
  );

  $items['admin/build/DRUPAU_i18n_labels_import/import'] = array(
    'title' => t('Import'),
    'weight' => 10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
   );

  $items['admin/build/DRUPAU_i18n_labels_import/settings'] = array(
    'title' => t('Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('DRUPAU_i18n_labels_import_settings'),
    'access arguments' => array('modify settings'),
    'weight' => 20,
    'type' => MENU_LOCAL_TASK,
   );

  return $items;
}

/**
 * Import page.
 *
 * User can select a language and attach a CSV file in order to
 * generate translations into database.
 *
 * @return Import form.
 */
function DRUPAU_i18n_labels_import_import_form() {
	$form['#attributes'] = array('enctype' => 'multipart/form-data');

  $form['import'] =  array(
    '#type' => 'fieldset',
		'#title' => t('Import translation'),
  );

  $form['import']['language_source'] = array(
    '#type' => 'select',
    '#title' => t('Source language'),
		'#options' => locale_language_list(),
    '#description' => t("Select the source language to translate."),
  );

  $form['import']['language_target'] = array(
    '#type' => 'select',
    '#title' => t('Translation language'),
		'#options' => locale_language_list(),
    '#description' => t("Select the translation language to import from CSV format."),
  );

  $form['import']['file'] = array(
    '#type' => 'file',
    '#title' => t('Translation file'),
    '#description' => t("Select the translation file to import."),
  );

  $form['import']['submit'] = array(
    '#type' => 'submit',
		'#value' => t('Import')
  );

  return $form;
}

/**
 * Implementation of hook_submit().
 *
 * Called when import form is submitted, run CSV file reading.
 */
function DRUPAU_i18n_labels_import_import_form_submit($form, &$form_state) {
  $language_target = $form_state['values']['language_target'];
  $language_source = $form_state['values']['language_source'];
  $csv_file = $_FILES['files']['tmp_name']['file'];

  DRUPAU_i18n_labels_import_import($language_source, $language_target, $csv_file);
}

/**
 * Read CSV file and run term_target database table updating process
 * with extracted fields.
 *
 * @param $language ISO 639-1 language code.
 * @param $csv_file Path of CSV file.
 */
function DRUPAU_i18n_labels_import_import($language_source, $language_target, $csv_file) {
	if (empty($csv_file)) {
		form_set_error('file', t('File to import not found.'));
		return;
	}

  //
  // Open CSV file as read-mode
  //
	if (! $handle = fopen($csv_file, 'rb')) {
		form_set_error('file', t('Error opening file. Check server configuration.'));
		return;
	}

  //
  // Read CSV file and update each line.
  //
  // First time at bucle, column name will be indexed in order to add
  // the possibility to change columns positions.
  //
  $term = array("language_target" => $language_target, "language_source" => $language_source, "plural" => 1);
  $i = 0;
  $additions = $updates = $deletes = 0;
  $additions_tmp = $updates_tmp = $deletes_tmp = 0;
	while ($data = fgetcsv($handle, 1000, variable_get('CSV_FIELD_SEPARATOR_BABEL', CSV_FIELD_SEPARATOR_BABEL))) {

		if ($i == 0) {
		  for($x=0; $i<count($data); $i++) {
			$columns[$data[$i]] = $x;
			$x++;
		  }
		  $i++;
		}
		else {
			if($data[$columns['term_source']]!='' && isset($data[$columns['term_translated']]) && $data[$columns['term_translated']]!=''){

				$term['source'] = trim($data[$columns['term_source']]);
				$term['translation'] = trim(iconv(variable_get('CSV_ENCODING_BABEL', CSV_ENCODING_BABEL), 'UTF-8', $data[$columns['term_translated']]));
				list($additions_tmp, $updates_tmp, $deletes_tmp) = DRUPAU_i18n_labels_import_import_db_update($term);
			}
		}

    //
    // Increase operations count
    //
    $additions += $additions_tmp;
    $updates += $updates_tmp;
    $deletes += $deletes_tmp;
	}
	fclose($handle);

  //
  // Refresh cache
  //
  require_once "./includes/locale.inc";
  _locale_invalidate_js($language_target);
  _locale_invalidate_js();
  cache_clear_all('locale:', 'cache', TRUE);
  menu_rebuild();

  //
  // Message
  //
  if ($additions > 0 || $updates > 0 || $deletes > 0)
  {
    drupal_set_message(t('The translation was successfully imported. There are %number newly created translated strings, %update strings were updated and %delete strings were removed.', array('%number' => $additions, '%update' => $updates, '%delete' => $deletes)));
  }
  else {
    drupal_set_message(t('The translation was successfully imported. Any string has been changed.'));
  }
}

/**
 * Update locales_target database table.
 *
 * Create record of translation LID if it doesn't exist. If it exists,
 * update record or delete it if translation has not been specified.
 *
 * @param $term
 *   An associative array with term data like translation, LIDs or language.
 *
 *   The array must have next keys:
 *     language: ISO 639-1 language code.
 *     plural: Always 1.
 *     lids: LIDs of terms separated by field data separator (if more than one).
 *     translation: translation in plain-text (non-blob).
 *
 *  @return
 *    An array containing the number of operations performed:
 *      0 => Number of additions in database (INSERT)
 *      1 => Number of updates in database (UPDATE)
 *      2 => Number of deletes in database (DELETES)
 */
function DRUPAU_i18n_labels_import_import_db_update($term) {
  //
  // First of all, detect if there are more than one LID
  //
  $additions = $updates = $deletes = 0;
  $language_default=variable_get('language_default',NULL);
  if($term['language_source']==$language_default->language){
	  $no_lids = db_query("SELECT COUNT(*) FROM locales_source WHERE lcase( convert( source USING UTF8 ))= '%s'",array(strtolower($term['source'])));

	  //Migrate query to D7
	  //$lids_query = db_query("SELECT lid FROM locales_source WHERE convert( source USING BINARY ) = '%s'",array($term['source']));
	  $dbQuery = db_select('locales_source', 'l');
	  $dbQuery->where('lcase( convert( source USING UTF8 )) = :trans', array('trans' => strtolower($term['source'])));
	  $dbQuery->fields('l', array('lid'));
	  $lids_query = $dbQuery->execute();
	}else{
	  $no_lids = db_query("SELECT COUNT(*) FROM locales_target WHERE lcase( convert( translation USING UTF8 ))= '%s' AND language='%s'",array(strtolower($term['source']),$term['language_source']));

	  //Migrate query to D7
	  //$lids_query = db_query("SELECT lid FROM locales_target WHERE convert( translation USING BINARY )= '%s' AND language='%s'",array($term['source'],$term['language_source']));
	  $lids_query = db_select('locales_target', 'l')
	                 ->fields('l', array('lid'))
	                 ->where('lcase( convert( translation USING UTF8 )) = :trans ', array('trans' => strtolower($term['source'])))
	                 ->condition('language', $term['language_source'], '=')
	                 ->execute();
  }

  if($no_lids->rowCount()){
	  //
	  // Now iterate on each lid and update/insert database
	  //

	  //while($lids=db_fetch_object($lids_query)){
    while ($lids = $lids_query->fetchAssoc()) {

		  //Migrate query to D7
      //$translation = db_query("SELECT convert(translation USING BINARY) FROM {locales_target} WHERE lid=%d AND language='%s'", array($lids['lid'], $term['language_target']));
      $dbQuery = db_select('locales_target', 'l');
      $dbQuery->condition('lid', $lids['lid'], '=');
      $dbQuery->condition('language', $term['language_target'], '=');
      $dbQuery->fields('l', array('translation'));
      $translation = $dbQuery->execute();

  		// If record does not exist, insert it, but only if translation is specified
  		if ($translation->rowCount()===0) {
  		  if (! empty($term['translation'])) {
  		    //Migration to D7
  			  //db_query("INSERT INTO {locales_target} SET lid=%d, translation=CONVERT('%s' USING BINARY), language='%s'", array($lids['lid'], $term['translation'], $term['language_target']));
  			  $db = db_insert('locales_target')
  			           ->fields(array('lid' => $lids['lid'],
  			                          'language' => $term['language_target'],
  			                          'translation' => $term['translation']))
  			           ->execute();
  			 $additions++;
  		  }
  		}// Record exists
  		else {
  		  // If translation is not specified, delete record!
  		  if (empty($term['translation'])) {
  			db_query("DELETE FROM {locales_target} WHERE lid=%d AND language='%s'", array($lids['lid'], $term['language_target']));
  			$deletes++;
  		  }
  		  // Update record!
  		  elseif ($term['translation'] != $translation) {

  		    //Migration to D7
  			  //db_query("UPDATE {locales_target} SET translation=CONVERT('%s' USING BINARY) WHERE lid=%d AND language='%s'", array($term['translation'], $lids['lid'], $term['language_target']));
  			  $num_updated = db_update('locales_target')
  			               ->fields(array('translation'=> $term['translation']))
  			               ->condition('lid', $lids['lid'], '=')
  			               ->condition('language', $term['language_target'], '=')
  			               ->execute();

  			$updates++;
  		  }
  		}
	  }//WHILE
  }//IF
  /*
  echo "Additions: " . $additions . "<br>";
  echo "Updates: " . $updates . "<br>";
  echo "Deletes: " . $deletes . "<br>";
  die();
  */
  return array($additions, $updates, $deletes);
}

/**
 * Settings administration page.
 *
 * Here you can set some options like field separator
 * on CSV files.
 */
function DRUPAU_i18n_labels_import_settings() {
	$form['CSV_FIELD_SEPARATOR_BABEL'] = array(
    '#type' => 'textfield',
    '#title' => t('Field separator'),
    '#default_value' => variable_get('CSV_FIELD_SEPARATOR_BABEL', CSV_FIELD_SEPARATOR_BABEL),
    '#description' => t("The field separator defines the fields in CSV file."),
    '#required' => TRUE,
  );

  $form['CSV_ENCODING_BABEL'] = array(
    '#type' => 'select',
    '#title' => t('File encoding'),
    '#default_value' => variable_get('CSV_ENCODING_BABEL', CSV_ENCODING_BABEL),
    '#description' => t("Enconding to use on reading and writing CSV files."),
    '#options' => array('CP1252' => 'CP1252', 'UTF-8' => 'UTF-8', 'ISO-8859-1' => 'ISO-8859-1'),
  );

	return system_settings_form($form);
}

/**
 * Implementation of hook_submit().
 *
 * Save settings with specified values in form.
 */
function DRUPAU_i18n_labels_import_settings_submit($form, &$form_state) {
	variable_set('CSV_FIELD_SEPARATOR_BABEL', $form_state['values']['CSV_FIELD_SEPARATOR_BABEL']);
  variable_set('CSV_ENCODING_BABEL', $form_state['values']['CSV_ENCODING_BABEL']);
}
